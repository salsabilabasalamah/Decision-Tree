# Function to calculate Gini Index
def calculate_gini_index(groups, classes):
    total_samples = float(sum(len(group) for group in groups))
    gini_score = 0.0
    
    for group in groups:
        size = float(len(group))
        if size == 0:
            continue
        score = 0.0
        for class_val in classes:
            p = [row[-1] for row in group].count(class_val) / size
            score += p * p
        gini_score += (1.0 - score) * (size / total_samples)
        
    return gini_score

# Function to split the dataset based on attribute value and split value
def split_dataset(index, value, dataset):
    left, right = list(), list()
    for row in dataset:
        if row[index] < value:
            left.append(row)
        else:
            right.append(row)
    return left, right

# Function to find the best split at each node using Gini Index
def get_best_split_gini(dataset):
    class_values = list(set(row[-1] for row in dataset))
    best_index, best_value, best_gini = 999, 999, 999
    best_groups = None
    
    for index in range(len(dataset[0]) - 1):
        for row in dataset:
            groups = split_dataset(index, row[index], dataset)
            gini = calculate_gini_index(groups, class_values)
            if gini < best_gini:
                best_index, best_value, best_gini, best_groups = index, row[index], gini, groups
    
    return {'index': best_index, 'value': best_value, 'groups': best_groups}

# Function to build the Decision Tree using Gini Index
def build_decision_tree_gini(node, max_depth, min_size, depth):
    left, right = node['groups']
    del(node['groups'])
    
    if not left or not right:
        node['left'] = node['right'] = get_most_common_class(left + right)
        return
    
    if depth >= max_depth:
        node['left'], node['right'] = get_most_common_class(left), get_most_common_class(right)
        return
    
    if len(left) <= min_size:
        node['left'] = get_most_common_class(left)
    else:
        node['left'] = get_best_split_gini(left)
        build_decision_tree_gini(node['left'], max_depth, min_size, depth+1)
    
    if len(right) <= min_size:
        node['right'] = get_most_common_class(right)
    else:
        node['right'] = get_best_split_gini(right)
        build_decision_tree_gini(node['right'], max_depth, min_size, depth+1)

# Function to make predictions using the Decision Tree
def predict(node, row):
    if row[node['index']] < node['value']:
        if isinstance(node['left'], dict):
            return predict(node['left'], row)
        else:
            return node['left']
    else:
        if isinstance(node['right'], dict):
            return predict(node['right'], row)
        else:
            return node['right']

# Example Usage
dataset = [
    [2.771244718, 1.784783929, 0],
    [1.728571309, 1.169761413, 0],
    [3.678319846, 2.81281357, 0],
    [3.961043357, 2.61995032, 0],
    [2.999208922, 2.209014212, 0],
    [7.497545867, 3.162953546, 1],
    [9.00220326, 3.339047188, 1],
    [7.444542326, 0.476683375, 1],
    [10.12493903, 3.234550982, 1],
    [6.642287351, 3.319983761, 1]
]

tree = get_best_split_gini(dataset)
build_decision_tree_gini(tree, 2, 1, 1)

for row in dataset:
    prediction = predict(tree, row)
    print('Predicted:', prediction, 'Actual:', row[-1])
